# Precondition: x ∈ R, y ∈ N.
# Postcondition: return x^y (return 1 if x = y = 0).
def Pow1(x, y):
    # Precondition for r: xi ∈ R, yi ∈ N, and zi = x^(y0 - yi) * z for some initial y0 and z.
    # Postcondition for r: return xi^yi * zi (return zi if xi = yi = 0).
    def r(xi, yi, zi):
        if yi == 0:
            return zi
        elif yi % 2 == 1:
            return r(xi * xi, yi // 2, zi * xi)
        else:
            return r(xi * xi, yi // 2, zi)

    if x == 0 and y == 0:
        return 1
    else:
        # Call the recursive function with initial values.
        return r(x, y, 1)




# Precondition: xi ∈ R, yi ∈ N, zi ∈ R such that zi initially equals 1.
# Postcondition: return xi^yi * zi.
def r(xi, yi, zi):
    if yi == 0:
        return zi
    elif yi % 2 == 1:
        return r(xi * xi, yi // 2, zi * xi)
    else:
        return r(xi * xi, yi // 2, zi)

# Precondition: x ∈ R, y ∈ N.
# Postcondition: return x^y (return 1 if x = y = 0).
def Pow2(x, y):
    # Handle the special case when both x and y are zero.
    if x == 0 and y == 0:
        return 1
    else:
        # Call the recursive function with initial values.
        return r(x, y, 1)

# Example usage:
# print(Pow2(2, 3))  # Should output 8
# print(Pow2(5, 0))  # Should output 1
# print(Pow2(2, 5))  # Should output 32
# print(Pow2(0, 0))  # Should output 1, special case


def PowR(x, y):
    # Handle base cases
    if y == 0:
        return 1

    # Handle the recursive cases
    if y % 2 == 0:
        # If y is even, we can simply calculate (x^2)^(y/2)
        return PowR(x * x, y // 2)
    else:
        # If y is odd, then x^y = x * x^(y-1), and we apply the reduction to (y-1) which is even
        return x * PowR(x * x, (y) // 2)


# # Example usage:
# print(PowR(2, 3))  # Should output 8
# print(PowR(5, 0))  # Should output 1
# print(PowR(2, 5))  # Should output 32
# print(PowR(0, 0))  # Should output 1, special case


def IsIn(v, A):
    def Helper(r0, r1, c0, c1):
        # Base case: If the sub-array is empty, return False
        if r0 >= r1 or c0 >= c1:
            return False

        # Calculate the middle element
        rm = (r0 + r1) // 2
        cm = (c0 + c1) // 2
        middle_element = A[rm][cm]

        # Compare 
        if v == middle_element:
            return True
        elif v < middle_element:
            # Search in the left and above the middle element
            return (Helper(r0, rm, c0, cm) or
                    Helper(r0, rm, cm, c1) or
                    Helper(rm, r1, c0, cm))
        else:
            # Search in the right and below the middle element
                    return (Helper(rm + 1, r1, cm + 1, c1) or
                    Helper(rm + 1, r1, c0, cm + 1) or
                    Helper(r0, rm + 1, cm + 1, c1))

    return Helper(0, len(A), 0, len(A[0])) if A else False

# Example matrix A
A = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
]

# Test the function with a value that is in the matrix

print(IsIn(7, A))
print(IsIn(1, A))   # Should output True
print(IsIn(12, A)) 
print(IsIn(3, A)) 
print(IsIn(9, A))
print(IsIn(11, A))
print(IsIn(5, A))
print(IsIn(8, A))
print(IsIn(2, A))
print(IsIn(6, A))
#Write all test function for ISIn
# Test the function with a value that is not in the matrix
# print(IsIn(0, A))   # Should output False
# print(IsIn(13, A))  # Should output False
# print(IsIn(100, A)) # Should output False
# print(IsIn(4, A)) # Should output False
